













///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class ResistorConversionPage extends StatefulWidget {
  @override
  _ResistorConversionPageState createState() => _ResistorConversionPageState();
}


class _ResistorConversionPageState extends State<ResistorConversionPage> {
  // Declare the state for the selected bands
  String _selectedBand1 = 'Brown';
  String _selectedBand2 = 'Black';
  String _selectedBand3 = 'Black';
  String _selectedBand4 = 'Brown';

  // Define the available colors for each band
  final List<String> _band1Colors = [
    'Brown',
    'Red',
    'Orange',
    'Yellow',
    'Green',
    'Blue',
    'Violet',
    'Grey',
    'White'
  ];
  final List<String> _band2Colors = [
    'Black',
    'Brown',
    'Red',
    'Orange',
    'Yellow',
    'Green',
    'Blue',
    'Violet',
    'Grey',
    'White'
  ];
  final List<String> _band3Colors = [
    'Black',
    'Brown',
    'Red',
    'Orange',
    'Yellow',
    'Green',
    'Blue',
    'Violet',
    'Grey',
    'White',
    'Gold',
    'Silver'
  ];
  final List<String> _band4Colors = [
    'Brown',
    'Red',
    'Green',
    'Blue',
    'Violet',
    'Grey',
    'Gold',
    'Silver'
  ];

  final Map<String, int> _colorCodeMap = {
    'Black': 0, 'Brown': 1, 'Red': 2, 'Orange': 3, 'Yellow': 4,
    'Green': 5, 'Blue': 6, 'Violet': 7, 'Grey': 8, 'White': 9,
  };
  final Map<String, double> _multiplierMap = {
    'Black': 1, 'Brown': 10, 'Red': 100, 'Orange': 1000, 'Yellow': 10000,
    'Green': 100000, 'Blue': 1000000, 'Violet': 10000000, 'Grey': 100000000,
    'White': 1000000000, 'Gold': 0.1, 'Silver': 0.01,
  };

  final Map<String, LinearGradient> gradientColorMap = {
    'Gold': LinearGradient(
      colors: [Color(0xFFD4AF37), Color(0xFFFFD700)], // Example gold gradient
      begin: Alignment.topLeft,
      end: Alignment.bottomRight,
    ),
    'Silver': LinearGradient(
      colors: [Color(0xFFC0C0C0), Color(0xFFF0F0F0)], // Example silver gradient
      begin: Alignment.topLeft,
      end: Alignment.bottomRight,
    ),
  };

  final Map<String, String> _toleranceMap = {
    'Brown': '±1%',
    'Red': '±2%',
    'Green': '±0.5%',
    'Blue': '±0.25%',
    'Violet': '±0.1%',
    'Grey': '±0.05%',
    'Gold': '±5%',
    'Silver': '±10%',
    'None': '±20%',
  };
  double _resistanceValue = 0.0;
  String _toleranceValue = '±5%';
  final Map<String, Color> _colorSwatchMap = {
    'Black': Colors.black,
    'Brown': Colors.brown,
    'Red': Colors.red,
    'Orange': Colors.orange,
    'Yellow': Colors.yellow,
    'Green': Colors.green,
    'Blue': Colors.blue,
    'Violet': Colors.purple,
    'Grey': Colors.grey,
    'White': Colors.white,
    'Gold': Colors.amber,
    'Silver': Colors.blueGrey,
  };

  Color _band1Color = Colors.white;
  Color _band2Color = Colors.white;
  Color _band3Color = Colors.white;
  Color _band4Color = Colors.white;

  void _changeBandColor(int band, Color color) {
    setState(() {
      switch (band) {
        case 1:
          _band1Color = color;
          break;
        case 2:
          _band2Color = color;
          break;
        case 3:
          _band3Color = color;
          break;
        case 4:
          _band4Color = color;
          break;
      }
    });
  }
  void _calculateResistance() {
    setState(() {
      int firstDigit = _colorCodeMap[_selectedBand1] ?? 0;
      int secondDigit = _colorCodeMap[_selectedBand2] ?? 0;
      double multiplier = _multiplierMap[_selectedBand3] ?? 1;
      _resistanceValue = (firstDigit * 10 + secondDigit) * multiplier;
      _toleranceValue = _toleranceMap[_selectedBand4] ?? '±20%';
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Resistor Conversion')),
      body: SingleChildScrollView(
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: <Widget>[

              Image.asset(
                'Images/Resistor.jpg',
                width: 200, // set the width to the desired width in logical pixels
                height: 100, // set the height to the desired height in logical pixels
              ),

              Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: <Widget>[

                  ColorIndicator(color: _band1Color),
                  ColorIndicator(color: _band2Color),
                  ColorIndicator(color: _band3Color),
                  ColorIndicator(color: _band4Color),
                ],
              ),
              ColorSelector(
                bandName: 'Band 1',
                selectedColor: _selectedBand1,
                colorsList: _band1Colors,
                colorMap: _colorSwatchMap,
                gradientMap: gradientColorMap,

                onColorTap: (color) {
                  setState(() {
                    _selectedBand1 = color;
                    _band1Color = _colorSwatchMap[color] ?? Colors.white; // Update the band color
                    _calculateResistance();

                  });
                },
              ),

// Band 2 Color Selector
              ColorSelector(
                bandName: 'Band 2',
                selectedColor: _selectedBand2,
                colorsList: _band2Colors,
                colorMap: _colorSwatchMap,
                gradientMap: gradientColorMap,
                onColorTap: (color) {
                  setState(() {
                    _selectedBand2 = color;
                    _band2Color = _colorSwatchMap[color] ?? Colors.white; // Update the band color
                    _calculateResistance();
                  });
                },
              ),

// Band 3 Color Selector
              ColorSelector(
                bandName: 'Band 3',
                selectedColor: _selectedBand3,
                colorsList: _band3Colors,
                colorMap: _colorSwatchMap,
                gradientMap: gradientColorMap,
                onColorTap: (color) {
                  setState(() {
                    _selectedBand3 = color;
                    _band3Color = _colorSwatchMap[color] ?? Colors.white; // Update the band color
                    _calculateResistance();
                  });
                },
              ),
// Band 4 Color Selector
              ColorSelector(
                bandName: 'Band 4',
                selectedColor: _selectedBand4,
                colorsList: _band4Colors,
                colorMap: _colorSwatchMap,
                gradientMap: gradientColorMap,
                onColorTap: (color) {
                  setState(() {
                    _selectedBand4 = color;
                    _band4Color = _colorSwatchMap[color] ?? Colors.white; // Update the band color
                    _calculateResistance();
                  });
                },
              ),
              SizedBox(height: 20),
              // Display the calculated resistance
              Text(
                'Resistance Value: ${_resistanceValue.toStringAsFixed(2)} Ω',
                style: TextStyle(fontSize: 20.0),
              ),
              // Display the tolerance
              Text(
                'Tolerance: $_toleranceValue',
                style: TextStyle(fontSize: 20.0),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
// This widget represents the color indicator under each band.
class ColorIndicator extends StatelessWidget {
  final Color color;

  const ColorIndicator({Key? key, required this.color}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Container(
      width: 40,
      height: 40,
      margin: EdgeInsets.all(4),
      decoration: BoxDecoration(
        color: color,
        border: Border.all(color: Colors.black, width: 2), // Add border to make the white color visible
      ),
    );
  }
}
class ColorSelector extends StatelessWidget {
  final String bandName;
  final String selectedColor;
  final List<String> colorsList;
  final Function(String) onColorTap;
  final Map<String, Color> colorMap; // For solid colors
  final Map<String, LinearGradient> gradientMap; // For gradients

  const ColorSelector({
    Key? key,
    required this.bandName,
    required this.selectedColor,
    required this.colorsList,
    required this.onColorTap,
    required this.colorMap,
    this.gradientMap = const {}, // Default to empty if not provided
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          bandName,
          style: TextStyle(fontSize: 18.0, fontWeight: FontWeight.bold),
        ),
        SizedBox(height: 10),
        Wrap(
          children: colorsList.map((colorName) {
            final isGradient = gradientMap.containsKey(colorName);
            return GestureDetector(
              onTap: () => onColorTap(colorName),
              child: Container(
                width: 40,
                height: 40,
                decoration: BoxDecoration(
                  gradient: isGradient ? gradientMap[colorName] : null,
                  color: isGradient ? null : colorMap[colorName],
                  border: Border.all(color: selectedColor == colorName ? Colors.black : Colors.grey, width: 2),
                  borderRadius: BorderRadius.circular(4),
                ),
                child: selectedColor == colorName ? Icon(Icons.check, color: Colors.white) : null,
              ),
            );
          }).toList(),
        ),
      ],
    );
  }
}


class ResistorBand extends StatelessWidget {
  final Color color;
  final VoidCallback onTap;

  const ResistorBand({Key? key, required this.color, required this.onTap})
      : super(key: key);

  @override
  Widget build(BuildContext context) {
    return InkWell(
      onTap: onTap,
      child: Container(
        width: 30,
        height: 100,
        color: color,
        margin: EdgeInsets.symmetric(horizontal: 4),
      ),
    );
  }
}

class _SMDResistorConversionPageState extends State<SMDResistorConversionPage> {
  String markingCode = '';
  String resistorValue = '';

  void calculateResistorValue(String code) {

    if (code.length == 3) {

      String firstTwoDigits = code.substring(0, 2);

      setState(() {
        resistorValue = '$firstTwoDigits ohm';
      });
    } else {
      
      setState(() {
        resistorValue = 'Invalid input. Please enter a 3-digit code.';
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('SMD Resistor Conversion'),
      ),
      body: Padding(
        padding: EdgeInsets.all(20.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: <Widget>[
            Text(
              'Insert the marking code of the SMD resistor (3 digits):',
              style: TextStyle(fontSize: 18.0),
            ),
            TextField(
              onChanged: (value) {
                markingCode = value;
              },
              decoration: InputDecoration(
                labelText: 'Marking Code',
                border: OutlineInputBorder(),
              ),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                calculateResistorValue(markingCode);
              },
              child: Text('Calculate'),
            ),
            SizedBox(height: 20),
            Text(
              'The resistor value can be:',
              style: TextStyle(fontSize: 18.0),
            ),
            SizedBox(height: 10),
            Text(
              resistorValue,
              style: TextStyle(fontSize: 16.0),
            ),
          ],
        ),
      ),
    );
  }
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
